<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/image"
        android:visibility="gone"
        android:layout_width="150dp"
        android:layout_height="150dp"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <com.kkxx.example.magnifierdemo.Text
        android:id="@+id/text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Flutter现在开始Beta测试。谷歌创建这个框架是希望为iOS和Anroid应用提供跨平台的界面，虽然不是标准的，但看上像原生的。和React Native类似，Flutter支持反应式风格的UI定义方法。它与其他跨平台Web视图框架的区别是，它基于Dart，这样就不需要JavaScript来连接UI和OS平台提供的原生服务，如位置服务、传感器访问、相机等等。借助提前编译成原生代码的Dart，Flutter节省了使用JavaScript桥接时的上下文切换开销。旨在提供原生UI外观的跨平台框架使用原生实现的小部件来描绘按钮、表格等。通常，这还需要App的不同部分使用JavaScript桥接来通信，导致速度变慢。为了避免这个问题，Flutter提供了自己的小部件集合，直接在OS平台提供的画布上描绘这类控件。这种方法的另外一个好处和Dart的UI布局机制有关。Android Layouts或iOS Constraints都旨在提供抽象概念描述在屏幕上布局UI元素的任何可能的方法，和这些CSS盒子模型不同，每个Flutter小部件都有自己的简单布局模型。具体来讲，如果要让一个小部件居中，则可以把它放到一个Center小部件里。类似地，如果要在其四周留有边距，则可以把它放在一个Padding小部件里。下面是一个简单的例子，一个Center小部件中包含一个文本和一个图标，两者垂直排列，在Flutter中，所有的主题和导航都表示为小部件，因此，你可以改变UI的外观或者使用不同的父部件浏览不同视图的方式。从Flutter进入Alpha阶段开始，谷歌就一直致力于更好的工具集成、Android Studio和Visual Studio Code支持、更好的平台互操作性、更好的热重载以及一个针对部件树的部件查看器。由于Flutter使用了Dart，所以可以促进其应用的一个关键因素是，可用的第三方程序包让开发人员可以重用代码，而不必什么东西都从头开始编码。这包括类似发送网络请求、导航处理这样的东西，以及使用Firebase、SQLite、Facebook Connect等外部SDK。感兴趣的读者可以查看Flutter上可用的程序包目录，其中包括1000多个程序包，看看其中是否包含自己需要的一切。谷歌表示，在向1.0迈进的过程中，他们的重点是稳定性和支持更多的场景，例如，让Flutter更容易嵌入到已有的App中，使用内联WebViews，等等。"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toBottomOf="@id/image"
        tools:ignore="HardcodedText" />

</android.support.constraint.ConstraintLayout>